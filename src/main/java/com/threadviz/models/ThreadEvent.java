package com.threadviz.models;

import java.time.Instant;
import java.util.UUID;

/**
 * Represents an event generated by a thread during simulation.
 * This is the core data structure used to communicate thread state
 * changes between the simulation engine and the visualization layer.
 */
public class ThreadEvent {
    
    public enum EventType {
        THREAD_CREATED,
        THREAD_STARTED,
        THREAD_TERMINATED,
        LOCK_WAITING,
        LOCK_ACQUIRED,
        LOCK_RELEASED,
        CONDITION_WAITING,
        CONDITION_SIGNALED,
        EXECUTION,
        DEADLOCK_DETECTED
    }
    
    private final UUID id;
    private final String threadName;
    private final EventType type;
    private final String resourceId;
    private final Instant timestamp;
    private final String message;
    private Object payload;
    
    public ThreadEvent(String threadName, EventType type, String resourceId, String message) {
        this.id = UUID.randomUUID();
        this.threadName = threadName;
        this.type = type;
        this.resourceId = resourceId;
        this.timestamp = Instant.now();
        this.message = message;
    }
    
    // Getters
    
    public UUID getId() {
        return id;
    }
    
    public String getThreadName() {
        return threadName;
    }
    
    public EventType getType() {
        return type;
    }
    
    public String getResourceId() {
        return resourceId;
    }
    
    public Instant getTimestamp() {
        return timestamp;
    }
    
    public String getMessage() {
        return message;
    }
    
    public Object getPayload() {
        return payload;
    }
    
    public void setPayload(Object payload) {
        this.payload = payload;
    }
    
    @Override
    public String toString() {
        return String.format("[%s] %s: %s %s",
                timestamp, threadName, type, message);
    }
} 